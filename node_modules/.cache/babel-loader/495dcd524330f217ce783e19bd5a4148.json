{"ast":null,"code":"var _jsxFileName = \"/home/christian/Github/ynotes/src/pages/NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; //import notes from '../assets/data'\n\nimport { useParams, Link } from \"react-router-dom\";\nimport { ReactComponent as Arrowleft } from '../assets/arrow-left.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = _ref => {\n  _s();\n\n  let {\n    history\n  } = _ref;\n  let params = useParams();\n  let noteId = params.id; //let note = notes.find(note => note.id === Number(noteId))\n\n  let [note, setNote] = useState(null);\n  useEffect(() => {\n    let getNote = async () => {\n      let response = await fetch(`http://localhost:8000/notes/${noteId}`);\n      let data = await response.json();\n      setNote(data);\n    };\n\n    getNote();\n  }, [noteId]);\n\n  let updateNote = async () => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({ ...note,\n        'updated': new Date()\n      })\n    });\n  };\n\n  let deleteNote = async () => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n    history.push('/');\n  };\n\n  let handleSubmit = () => {\n    if (noteId !== 'new' && !note.body) {\n      deleteNote();\n    } else if (noteId === 'new') {\n      updateNote();\n    }\n\n    history.push('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Arrowleft, {\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({ ...note,\n          'body': e.target.value\n        });\n      },\n      value: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NotePage, \"GyecKfmZuiEQj7DMlhNIJEsUGEg=\", false, function () {\n  return [useParams];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"sources":["/home/christian/Github/ynotes/src/pages/NotePage.js"],"names":["React","useEffect","useState","useParams","Link","ReactComponent","Arrowleft","NotePage","history","params","noteId","id","note","setNote","getNote","response","fetch","data","json","updateNote","method","headers","body","JSON","stringify","Date","deleteNote","push","handleSubmit","e","target","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\n//import notes from '../assets/data'\nimport {useParams,Link} from \"react-router-dom\"\nimport {ReactComponent as Arrowleft} from '../assets/arrow-left.svg'\n\n\n\nconst NotePage = ({history}) => {\n    let params = useParams()\n    let noteId = params.id\n\n    //let note = notes.find(note => note.id === Number(noteId))\n    let [note, setNote] = useState(null)\n\n    useEffect(() => {\n        let getNote = async () => {\n            let response = await fetch(`http://localhost:8000/notes/${noteId}`)\n            let data = await response.json()\n            setNote(data) \n        }\n        getNote()  \n    }, [noteId])\n\n    let updateNote = async () => {\n        await fetch(`http://localhost:8000/notes/${noteId}`, {\n            method: 'PUT',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify({...note, 'updated': new Date() })\n        })\n    }\n\n    let deleteNote = async () => {\n        await fetch(`http://localhost:8000/notes/${noteId}`, {\n            method: 'DELETE',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(note)\n        })\n        history.push('/')\n    }\n    \n    let handleSubmit = () => {\n        if(noteId !== 'new' && !note.body){\n            deleteNote()\n        }else if(noteId === 'new'){\n            updateNote()\n        }\n        history.push('/')\n    }\n        \n\n    return (\n        <div className=\"note\">\n            <div className=\"note-header\">\n                <h3>\n                    <Link to= \"/\" >\n                        <Arrowleft onClick={handleSubmit} />\n                    </Link>\n                </h3>\n\n                <button onClick={deleteNote}>Delete</button>\n            </div>\n            <textarea onChange = {(e) => {setNote({...note, 'body':e.target.value})}} value={note?.body}>\n\n            </textarea>\n        </div>\n    )\n}\n\nexport default NotePage\n"]},"metadata":{},"sourceType":"module"}